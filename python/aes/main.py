def xor_strings(string1: str, string2: str) -> list[list[int]]:
    '''takes 2 strings and return 4x4 matrix with xored string'''
    # append zeros to end of the string
    string1 = "{:<016s}".format(string1)
    string2 = "{:<016s}".format(string2)

    xored_matrix = [[-1 for _ in range(4)] for _ in range(4)]
    # write string to matrix
    string1_matrix = string_to_matrix(string1)
    string2_matrix = string_to_matrix(string2)

    # xor ascii values of strings
    for x in range(4):
        for y in range(4):
            xored_matrix[x][y] = int(
                ord(string1_matrix[x][y]) ^ ord(string2_matrix[x][y]))
    return xored_matrix


def key_expansion():
    ...


def left_shift(num: int, amount: int) -> int:
    '''takes int return bitwise shift to left string'''
    return int("0b" + bin(num)[2+amount:] + '0'*amount, base=2)


def add_round_key(state_matrix: list[list[int]], roundkey_matrix: list[list[int]]) -> list[list[int]]:
    add_round_key_matrix = [[-1 for _ in range(4)] for _ in range(4)]

    for y in range(4):
        for x in range(4):
            add_round_key_matrix[y][x] = state_matrix[y][x] ^ roundkey_matrix[y][x]
    return add_round_key_matrix


def string_to_matrix(string: str) -> list[list[str]]:
    '''takes string and writes it to matrix. if length of string is less than 16 it appends 0 to the end'''

    # append 0 to end of the string
    string = "{:<016s}".format(string)
    string_matrix = [['' for _ in range(4)] for _ in range(4)]
    for x in range(4):
        for y in range(4):
            string_matrix[x][y] = string[y * 4 + x]
    return string_matrix


def string_matrix_to_ascii_matrix(matrix: list[list[str]]) -> list[list[int]]:
    '''takes string matrix and return int matrix with ascii values'''

    ascii_matrix = [[-1 for _ in range(4)] for _ in range(4)]
    for x in range(4):
        for y in range(4):
            ascii_matrix[x][y] = ord(matrix[x][y])
    return ascii_matrix


def matrix_to_hex_matrix(matrix: list[list[int]]) -> list[list[str]]:
    '''takes int 4x4 matrix and return 4x4 matrix with str hex values'''

    hex_matrix = [['' for _ in range(4)] for _ in range(4)]
    for x in range(len(matrix[0])):
        for y in range(len(matrix)):
            hex_matrix[y][x] = hex(matrix[y][x])
    return hex_matrix


def hex_matrix_to_aes_hex_matrix(matrix: list[list[str]]) -> list[list[str]]:
    '''takes hex matrix and append zeros to the length 4 e.g. 0xf -> 0x0f'''

    aes_hex_matrix = [['' for _ in range(4)] for _ in range(4)]
    for x in range(len(matrix[0])):
        for y in range(len(matrix)):
            if len(matrix[y][x]) == 4:
                aes_hex_matrix[y][x] = matrix[y][x]
            else:
                aes_hex_matrix[y][x] = "0x0" + matrix[y][x][2]

    return aes_hex_matrix


def print_2dimensional_array(two_dimensional_array, name="default name"):
    print("---print 2dimensional array " + name + "---")
    for i in two_dimensional_array:
        print(i)
    print("---end print 2dimensional array " + name + "---")
    print()


def print_2dimensional_array_hex(two_dimensional_array, name="default name"):
    print("---print 2dimensional array hex" + name + "---")
    for i in two_dimensional_array:
        print(list(map(hex, i)))
    print("---end print 2dimensional array hex" + name + "---")
    print()


def sub_bytes(matrix: list[list[int]]) -> list[list[int]]:
    '''aes bytes substitution'''

    hexed_matrix = matrix_to_hex_matrix(matrix)
    aes_hexed_matrix = hex_matrix_to_aes_hex_matrix(hexed_matrix)
    sub_bytes_matrix = [[-1 for _ in range(4)] for _ in range(4)]
    for y in range(4):
        for x in range(4):
            row = int("0x" + aes_hexed_matrix[y][x][2:3], base=16)
            col = int("0x" + aes_hexed_matrix[y][x][3:4], base=16)
            sub_bytes_matrix[y][x] = s_box[row][col]
    return sub_bytes_matrix


def shift_rows(matrix):
    '''aes shift rows'''

    matrix[1] = matrix[1][1:] + matrix[1][:1]
    matrix[2] = matrix[2][2:] + matrix[2][:2]
    matrix[3] = matrix[3][3:] + matrix[3][:3]
    return matrix


def matrix_multiplication(matrix1, matrix2):
    # ! not working
    '''if a is an m*n matrix and b is an n*p matrix'''

    m = len(matrix1)
    n = len(matrix1[0])
    if n != len(matrix2):
        return "wrong input"
    p = len(matrix2[0])


def multiply3(num: int) -> int:
    '''aes GF multiplication by 3'''

    x = int(convert_hex_to_str_aes_hex(num)[2], base=16)
    y = int(convert_hex_to_str_aes_hex(num)[3], base=16)
    return multiply3_matrix[x][y]


def convert_hex_to_str_aes_hex(num: int) -> str:
    if len(hex(num)) != 4:
        return "0x0" + hex(num)[2]
    else:
        return hex(num)


def multiply2(num: int) -> int:
    '''aes GF multiplication by 2'''
    str_aes_hex_num = convert_hex_to_str_aes_hex(num)

    x = int(str_aes_hex_num[2], base=16)
    y = int(str_aes_hex_num[3], base=16)
    return multiply2_matrix[x][y]


def mix_columns(input_matrix: list[list[int]]) -> list[list[int]]:
    result_matrix = [[-1 for _ in range(4)] for _ in range(4)]

    for x in range(4):
        for y in range(4):
            temp = []
            for rcon_xy in range(4):
                # cell_result ^= rcon[y][rcon_xy] * input_matrix[x][rcon_xy]
                if rcon[y][rcon_xy] == 2:
                    temp.append(multiply2(
                        input_matrix[rcon_xy][x]))
                elif rcon[y][rcon_xy] == 3:
                    temp.append(multiply3(
                        input_matrix[rcon_xy][x]))
                elif rcon[y][rcon_xy] == 1:
                    temp.append(input_matrix[rcon_xy][x])
                else:
                    print("mix columns rcon wrong value")
            result_matrix[y][x] = temp[0] ^ temp[1] ^ temp[2] ^ temp[3]

    return result_matrix


def encryption(text, key):
    text_matrix = string_to_matrix(text)
    key_matrix = string_to_matrix(key)

    text_ascii_matrix = string_matrix_to_ascii_matrix(text_matrix)
    print_2dimensional_array_hex(text_ascii_matrix, "after text ascii matrix")
    key_ascii_matrix = string_matrix_to_ascii_matrix(key_matrix)
    print_2dimensional_array_hex(key_ascii_matrix, "after text ascii matrix")

    state = text_ascii_matrix

    state = add_round_key(state, key_ascii_matrix)
    print_2dimensional_array_hex(state, "after first add round key")
    for _ in range(10):
        state = sub_bytes(state)
        print_2dimensional_array_hex(state, name="after sub bytes")
        state = shift_rows(state)
        print_2dimensional_array_hex(state, "after shift rows")
        state = mix_columns(state)
        print_2dimensional_array_hex(state, "after mix columns")
        state = add_round_key(state)
        print_2dimensional_array_hex(state, "after add_round_key")


s_box = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
        0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
        0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
        0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
        0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
        0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
        0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
        0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
        0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
        0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
        0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
        0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
        0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
        0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
        0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
        0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
        0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]

multiply2_matrix = [[0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e],
                    [0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e,
                        0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e],
                    [0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e,
                        0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e],
                    [0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e,
                        0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e],
                    [0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e,
                        0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e],
                    [0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae,
                        0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe],
                    [0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce,
                        0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde],
                    [0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,
                        0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe],
                    [0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15,
                        0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05],
                    [0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35,
                        0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25],
                    [0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55,
                        0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45],
                    [0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75,
                        0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65],
                    [0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95,
                        0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85],
                    [0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5,
                        0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5],
                    [0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5,
                        0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5],
                    [0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5]]

multiply3_matrix = [[0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11],
                    [0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39,
                        0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21],
                    [0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69,
                        0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71],
                    [0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59,
                        0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41],
                    [0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9,
                        0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1],
                    [0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9,
                        0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1],
                    [0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9,
                        0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1],
                    [0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99,
                        0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81],
                    [0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92,
                        0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a],
                    [0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2,
                        0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba],
                    [0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2,
                        0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea],
                    [0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2,
                        0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda],
                    [0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52,
                        0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a],
                    [0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62,
                        0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a],
                    [0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32,
                        0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a],
                    [0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a]]


rcon = [[2, 3, 1, 1],
        [1, 2, 3, 1],
        [1, 1, 2, 3],
        [3, 1, 1, 2]]

text = "ATTACK AT DAWN!"
key = "SOME 128 BIT KEY"
# xor_strings(text, key)
key2 = "Thats my Kung Fu"
text2 = "Two One Nine Two"

encryption(text2, key2)
# text2_matrix = string_to_matrix(text2)
# print_2dimensional_array(text2_matrix, name="text2_matrix")
# key2_matrix = string_to_matrix(key2)
# print_2dimensional_array(key2_matrix, name="key2_matrix")
#
# text2_ascii_matrix = string_matrix_to_ascii_matrix(text2_matrix)
# text2_ascii_matrix_hex = matrix_to_hex_matrix(text2_ascii_matrix)
# print_2dimensional_array(text2_ascii_matrix_hex, name="text2_ascii_matrix_hex")
#
# key2_ascii_matrix = string_matrix_to_ascii_matrix(key2_matrix)
# key2_ascii_matrix_hex = matrix_to_hex_matrix(key2_ascii_matrix)
# print_2dimensional_array(key2_ascii_matrix_hex, name="key2_ascii_matrix_hex")
#
# add_round_key_matrix = add_round_key(text2_ascii_matrix, key2_ascii_matrix)
# add_round_key_matrix_hex = matrix_to_hex_matrix(add_round_key_matrix)
# print_2dimensional_array(add_round_key_matrix_hex, name="add_round_key_matrix")
#
# sub_bytes_matrix = sub_bytes(add_round_key_matrix)
# sub_bytes_matrix_hex = matrix_to_hex_matrix(sub_bytes_matrix)
# print_2dimensional_array(sub_bytes_matrix_hex, name="sub_bytes_matrix")
#
# shift_rows_matrix = shift_rows(sub_bytes_matrix)
# print_2dimensional_array(shift_rows_matrix, "shift_rows_matrix")
#
# aes_visual_matrix = [[0x87, 0x0a, 0x0b, 0x1a],
#                      [0x16, 0x1b, 0x56, 0x83],
#                      [0x47, 0xf1, 0x13, 0xbb],
#                      [0xe7, 0xd5, 0xc6, 0x28]]
# # for i in range(4):
# # for j in range(4):
# #aes_visual_matrix[i][j] = str(aes_visual_matrix[i][j])
#
# mixed_columns = mix_columns(shift_rows_matrix)
# mixed_columns_hexed = matrix_to_hex_matrix(mixed_columns)
# print_2dimensional_array(mixed_columns_hexed)
#
# print(f"{bin(multiply2(0x63)) = }")
# print(f"{bin(multiply3(0x2f)) = }")
